name: ML Wine Quality Prediction 

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '**.md'

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Lint code with flake8
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          
      - name: Run unit tests
        run: |
          pip install pytest
          pytest test.py -v || echo "Tests completed"

  build-and-push-ecr-image:
    name: Build and Push Docker Image to ECR
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Build, tag, and push ML app image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: wine-quality-latest
        run: |
          # Build & push ML application
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          # Also tag as latest
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy-to-ec2:
    name: Deploy ML App to Ubuntu EC2
    needs: build-and-push-ecr-image
    runs-on: wine-quality-ml # Specify runner dengan label
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Set working directory for ML project
        run: |
          sudo mkdir -p /home/ubuntu/wine-quality-ml/logs
          sudo mkdir -p /home/ubuntu/wine-quality-ml/artifacts
          sudo chown -R ubuntu:ubuntu /home/ubuntu/wine-quality-ml

      - name: Stop existing ML container
        run: |
          docker stop wine-quality-ml-app || echo "No existing container to stop"
          docker rm wine-quality-ml-app || echo "No existing container to remove"

      - name: Pull latest image from ECR
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        run: |
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:wine-quality-latest

      - name: Run new container on Ubuntu EC2
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        run: |
          docker run -d \
            --name wine-quality-ml-app \
            --restart unless-stopped \
            -p 5001:5000 \
            -v /home/ubuntu/wine-quality-ml/logs:/app/logs \
            -v /home/ubuntu/wine-quality-ml/artifacts:/app/artifacts \
            -e FLASK_ENV=production \
            -e FLASK_APP=app.py \
            -e PYTHONUNBUFFERED=1 \
            --health-cmd="curl -f http://localhost:5000/health || curl -f http://localhost:5000/ || exit 1" \
            --health-interval=30s \
            --health-timeout=10s \
            --health-retries=3 \
            --health-start-period=40s \
            --label "project=wine-quality-ml" \
            --label "owner=alvin0727" \
            $ECR_REGISTRY/$ECR_REPOSITORY:wine-quality-latest

      - name: Wait for container to start
        run: |
          echo "Waiting for container to start..."
          sleep 40

      - name: Health check
        run: |
          echo "Performing health check on Ubuntu EC2..."
          curl -f http://localhost:5001/health || curl -f http://localhost:5001/ || echo "Health check failed, but continuing..."

      - name: Show container status
        run: |
          echo "=== Container Status ==="
          docker ps -a --filter name=wine-quality-ml-app
          echo "=== Container Logs ==="
          docker logs wine-quality-ml-app --tail 20
          echo "=== System Info ==="
          uname -a
          df -h

      - name: Cleanup old images (only ML project images)
        run: |
          echo "Cleaning up old ML images..."
          docker image prune -af --filter "until=24h" --filter "label=project=wine-quality-ml"
          docker volume prune -f
          echo "Cleanup completed"